/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'RadioCountMsg'
 * message type.
 */

public class RadioCountMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 114;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new RadioCountMsg of size 114. */
    public RadioCountMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new RadioCountMsg of the given data_length. */
    public RadioCountMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg with the given data_length
     * and base offset.
     */
    public RadioCountMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg using the given byte array
     * as backing store.
     */
    public RadioCountMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public RadioCountMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public RadioCountMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg embedded in the given message
     * at the given base offset.
     */
    public RadioCountMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg embedded in the given message
     * at the given base offset and length.
     */
    public RadioCountMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <RadioCountMsg> \n";
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload1=0x"+Long.toHexString(get_payload1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload2=0x"+Long.toHexString(get_payload2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload3=0x"+Long.toHexString(get_payload3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload4=0x"+Long.toHexString(get_payload4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload5=0x"+Long.toHexString(get_payload5())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload6=0x"+Long.toHexString(get_payload6())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload7=0x"+Long.toHexString(get_payload7())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload8=0x"+Long.toHexString(get_payload8())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload9=0x"+Long.toHexString(get_payload9())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload10=0x"+Long.toHexString(get_payload10())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload11=0x"+Long.toHexString(get_payload11())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload12=0x"+Long.toHexString(get_payload12())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload13=0x"+Long.toHexString(get_payload13())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload14=0x"+Long.toHexString(get_payload14())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload15=0x"+Long.toHexString(get_payload15())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload16=0x"+Long.toHexString(get_payload16())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload17=0x"+Long.toHexString(get_payload17())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload18=0x"+Long.toHexString(get_payload18())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload19=0x"+Long.toHexString(get_payload19())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload20=0x"+Long.toHexString(get_payload20())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload21=0x"+Long.toHexString(get_payload21())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload22=0x"+Long.toHexString(get_payload22())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload23=0x"+Long.toHexString(get_payload23())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload24=0x"+Long.toHexString(get_payload24())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload25=0x"+Long.toHexString(get_payload25())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload26=0x"+Long.toHexString(get_payload26())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload27=0x"+Long.toHexString(get_payload27())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload28=0x"+Long.toHexString(get_payload28())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (false).
     */
    public static boolean isSigned_counter() {
        return false;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'counter'
     */
    public int get_counter() {
        return (int)getUIntBEElement(offsetBits_counter(), 16);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(int value) {
        setUIntBEElement(offsetBits_counter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload1
    //   Field type: long, unsigned
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload1' is signed (false).
     */
    public static boolean isSigned_payload1() {
        return false;
    }

    /**
     * Return whether the field 'payload1' is an array (false).
     */
    public static boolean isArray_payload1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload1'
     */
    public static int offset_payload1() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload1'
     */
    public static int offsetBits_payload1() {
        return 16;
    }

    /**
     * Return the value (as a long) of the field 'payload1'
     */
    public long get_payload1() {
        return (long)getUIntBEElement(offsetBits_payload1(), 32);
    }

    /**
     * Set the value of the field 'payload1'
     */
    public void set_payload1(long value) {
        setUIntBEElement(offsetBits_payload1(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload1'
     */
    public static int size_payload1() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload1'
     */
    public static int sizeBits_payload1() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload2
    //   Field type: long, unsigned
    //   Offset (bits): 48
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload2' is signed (false).
     */
    public static boolean isSigned_payload2() {
        return false;
    }

    /**
     * Return whether the field 'payload2' is an array (false).
     */
    public static boolean isArray_payload2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload2'
     */
    public static int offset_payload2() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload2'
     */
    public static int offsetBits_payload2() {
        return 48;
    }

    /**
     * Return the value (as a long) of the field 'payload2'
     */
    public long get_payload2() {
        return (long)getUIntBEElement(offsetBits_payload2(), 32);
    }

    /**
     * Set the value of the field 'payload2'
     */
    public void set_payload2(long value) {
        setUIntBEElement(offsetBits_payload2(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload2'
     */
    public static int size_payload2() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload2'
     */
    public static int sizeBits_payload2() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload3
    //   Field type: long, unsigned
    //   Offset (bits): 80
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload3' is signed (false).
     */
    public static boolean isSigned_payload3() {
        return false;
    }

    /**
     * Return whether the field 'payload3' is an array (false).
     */
    public static boolean isArray_payload3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload3'
     */
    public static int offset_payload3() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload3'
     */
    public static int offsetBits_payload3() {
        return 80;
    }

    /**
     * Return the value (as a long) of the field 'payload3'
     */
    public long get_payload3() {
        return (long)getUIntBEElement(offsetBits_payload3(), 32);
    }

    /**
     * Set the value of the field 'payload3'
     */
    public void set_payload3(long value) {
        setUIntBEElement(offsetBits_payload3(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload3'
     */
    public static int size_payload3() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload3'
     */
    public static int sizeBits_payload3() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload4
    //   Field type: long, unsigned
    //   Offset (bits): 112
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload4' is signed (false).
     */
    public static boolean isSigned_payload4() {
        return false;
    }

    /**
     * Return whether the field 'payload4' is an array (false).
     */
    public static boolean isArray_payload4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload4'
     */
    public static int offset_payload4() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload4'
     */
    public static int offsetBits_payload4() {
        return 112;
    }

    /**
     * Return the value (as a long) of the field 'payload4'
     */
    public long get_payload4() {
        return (long)getUIntBEElement(offsetBits_payload4(), 32);
    }

    /**
     * Set the value of the field 'payload4'
     */
    public void set_payload4(long value) {
        setUIntBEElement(offsetBits_payload4(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload4'
     */
    public static int size_payload4() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload4'
     */
    public static int sizeBits_payload4() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload5
    //   Field type: long, unsigned
    //   Offset (bits): 144
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload5' is signed (false).
     */
    public static boolean isSigned_payload5() {
        return false;
    }

    /**
     * Return whether the field 'payload5' is an array (false).
     */
    public static boolean isArray_payload5() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload5'
     */
    public static int offset_payload5() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload5'
     */
    public static int offsetBits_payload5() {
        return 144;
    }

    /**
     * Return the value (as a long) of the field 'payload5'
     */
    public long get_payload5() {
        return (long)getUIntBEElement(offsetBits_payload5(), 32);
    }

    /**
     * Set the value of the field 'payload5'
     */
    public void set_payload5(long value) {
        setUIntBEElement(offsetBits_payload5(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload5'
     */
    public static int size_payload5() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload5'
     */
    public static int sizeBits_payload5() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload6
    //   Field type: long, unsigned
    //   Offset (bits): 176
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload6' is signed (false).
     */
    public static boolean isSigned_payload6() {
        return false;
    }

    /**
     * Return whether the field 'payload6' is an array (false).
     */
    public static boolean isArray_payload6() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload6'
     */
    public static int offset_payload6() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload6'
     */
    public static int offsetBits_payload6() {
        return 176;
    }

    /**
     * Return the value (as a long) of the field 'payload6'
     */
    public long get_payload6() {
        return (long)getUIntBEElement(offsetBits_payload6(), 32);
    }

    /**
     * Set the value of the field 'payload6'
     */
    public void set_payload6(long value) {
        setUIntBEElement(offsetBits_payload6(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload6'
     */
    public static int size_payload6() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload6'
     */
    public static int sizeBits_payload6() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload7
    //   Field type: long, unsigned
    //   Offset (bits): 208
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload7' is signed (false).
     */
    public static boolean isSigned_payload7() {
        return false;
    }

    /**
     * Return whether the field 'payload7' is an array (false).
     */
    public static boolean isArray_payload7() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload7'
     */
    public static int offset_payload7() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload7'
     */
    public static int offsetBits_payload7() {
        return 208;
    }

    /**
     * Return the value (as a long) of the field 'payload7'
     */
    public long get_payload7() {
        return (long)getUIntBEElement(offsetBits_payload7(), 32);
    }

    /**
     * Set the value of the field 'payload7'
     */
    public void set_payload7(long value) {
        setUIntBEElement(offsetBits_payload7(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload7'
     */
    public static int size_payload7() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload7'
     */
    public static int sizeBits_payload7() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload8
    //   Field type: long, unsigned
    //   Offset (bits): 240
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload8' is signed (false).
     */
    public static boolean isSigned_payload8() {
        return false;
    }

    /**
     * Return whether the field 'payload8' is an array (false).
     */
    public static boolean isArray_payload8() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload8'
     */
    public static int offset_payload8() {
        return (240 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload8'
     */
    public static int offsetBits_payload8() {
        return 240;
    }

    /**
     * Return the value (as a long) of the field 'payload8'
     */
    public long get_payload8() {
        return (long)getUIntBEElement(offsetBits_payload8(), 32);
    }

    /**
     * Set the value of the field 'payload8'
     */
    public void set_payload8(long value) {
        setUIntBEElement(offsetBits_payload8(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload8'
     */
    public static int size_payload8() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload8'
     */
    public static int sizeBits_payload8() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload9
    //   Field type: long, unsigned
    //   Offset (bits): 272
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload9' is signed (false).
     */
    public static boolean isSigned_payload9() {
        return false;
    }

    /**
     * Return whether the field 'payload9' is an array (false).
     */
    public static boolean isArray_payload9() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload9'
     */
    public static int offset_payload9() {
        return (272 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload9'
     */
    public static int offsetBits_payload9() {
        return 272;
    }

    /**
     * Return the value (as a long) of the field 'payload9'
     */
    public long get_payload9() {
        return (long)getUIntBEElement(offsetBits_payload9(), 32);
    }

    /**
     * Set the value of the field 'payload9'
     */
    public void set_payload9(long value) {
        setUIntBEElement(offsetBits_payload9(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload9'
     */
    public static int size_payload9() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload9'
     */
    public static int sizeBits_payload9() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload10
    //   Field type: long, unsigned
    //   Offset (bits): 304
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload10' is signed (false).
     */
    public static boolean isSigned_payload10() {
        return false;
    }

    /**
     * Return whether the field 'payload10' is an array (false).
     */
    public static boolean isArray_payload10() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload10'
     */
    public static int offset_payload10() {
        return (304 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload10'
     */
    public static int offsetBits_payload10() {
        return 304;
    }

    /**
     * Return the value (as a long) of the field 'payload10'
     */
    public long get_payload10() {
        return (long)getUIntBEElement(offsetBits_payload10(), 32);
    }

    /**
     * Set the value of the field 'payload10'
     */
    public void set_payload10(long value) {
        setUIntBEElement(offsetBits_payload10(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload10'
     */
    public static int size_payload10() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload10'
     */
    public static int sizeBits_payload10() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload11
    //   Field type: long, unsigned
    //   Offset (bits): 336
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload11' is signed (false).
     */
    public static boolean isSigned_payload11() {
        return false;
    }

    /**
     * Return whether the field 'payload11' is an array (false).
     */
    public static boolean isArray_payload11() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload11'
     */
    public static int offset_payload11() {
        return (336 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload11'
     */
    public static int offsetBits_payload11() {
        return 336;
    }

    /**
     * Return the value (as a long) of the field 'payload11'
     */
    public long get_payload11() {
        return (long)getUIntBEElement(offsetBits_payload11(), 32);
    }

    /**
     * Set the value of the field 'payload11'
     */
    public void set_payload11(long value) {
        setUIntBEElement(offsetBits_payload11(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload11'
     */
    public static int size_payload11() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload11'
     */
    public static int sizeBits_payload11() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload12
    //   Field type: long, unsigned
    //   Offset (bits): 368
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload12' is signed (false).
     */
    public static boolean isSigned_payload12() {
        return false;
    }

    /**
     * Return whether the field 'payload12' is an array (false).
     */
    public static boolean isArray_payload12() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload12'
     */
    public static int offset_payload12() {
        return (368 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload12'
     */
    public static int offsetBits_payload12() {
        return 368;
    }

    /**
     * Return the value (as a long) of the field 'payload12'
     */
    public long get_payload12() {
        return (long)getUIntBEElement(offsetBits_payload12(), 32);
    }

    /**
     * Set the value of the field 'payload12'
     */
    public void set_payload12(long value) {
        setUIntBEElement(offsetBits_payload12(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload12'
     */
    public static int size_payload12() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload12'
     */
    public static int sizeBits_payload12() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload13
    //   Field type: long, unsigned
    //   Offset (bits): 400
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload13' is signed (false).
     */
    public static boolean isSigned_payload13() {
        return false;
    }

    /**
     * Return whether the field 'payload13' is an array (false).
     */
    public static boolean isArray_payload13() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload13'
     */
    public static int offset_payload13() {
        return (400 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload13'
     */
    public static int offsetBits_payload13() {
        return 400;
    }

    /**
     * Return the value (as a long) of the field 'payload13'
     */
    public long get_payload13() {
        return (long)getUIntBEElement(offsetBits_payload13(), 32);
    }

    /**
     * Set the value of the field 'payload13'
     */
    public void set_payload13(long value) {
        setUIntBEElement(offsetBits_payload13(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload13'
     */
    public static int size_payload13() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload13'
     */
    public static int sizeBits_payload13() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload14
    //   Field type: long, unsigned
    //   Offset (bits): 432
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload14' is signed (false).
     */
    public static boolean isSigned_payload14() {
        return false;
    }

    /**
     * Return whether the field 'payload14' is an array (false).
     */
    public static boolean isArray_payload14() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload14'
     */
    public static int offset_payload14() {
        return (432 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload14'
     */
    public static int offsetBits_payload14() {
        return 432;
    }

    /**
     * Return the value (as a long) of the field 'payload14'
     */
    public long get_payload14() {
        return (long)getUIntBEElement(offsetBits_payload14(), 32);
    }

    /**
     * Set the value of the field 'payload14'
     */
    public void set_payload14(long value) {
        setUIntBEElement(offsetBits_payload14(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload14'
     */
    public static int size_payload14() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload14'
     */
    public static int sizeBits_payload14() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload15
    //   Field type: long, unsigned
    //   Offset (bits): 464
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload15' is signed (false).
     */
    public static boolean isSigned_payload15() {
        return false;
    }

    /**
     * Return whether the field 'payload15' is an array (false).
     */
    public static boolean isArray_payload15() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload15'
     */
    public static int offset_payload15() {
        return (464 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload15'
     */
    public static int offsetBits_payload15() {
        return 464;
    }

    /**
     * Return the value (as a long) of the field 'payload15'
     */
    public long get_payload15() {
        return (long)getUIntBEElement(offsetBits_payload15(), 32);
    }

    /**
     * Set the value of the field 'payload15'
     */
    public void set_payload15(long value) {
        setUIntBEElement(offsetBits_payload15(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload15'
     */
    public static int size_payload15() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload15'
     */
    public static int sizeBits_payload15() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload16
    //   Field type: long, unsigned
    //   Offset (bits): 496
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload16' is signed (false).
     */
    public static boolean isSigned_payload16() {
        return false;
    }

    /**
     * Return whether the field 'payload16' is an array (false).
     */
    public static boolean isArray_payload16() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload16'
     */
    public static int offset_payload16() {
        return (496 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload16'
     */
    public static int offsetBits_payload16() {
        return 496;
    }

    /**
     * Return the value (as a long) of the field 'payload16'
     */
    public long get_payload16() {
        return (long)getUIntBEElement(offsetBits_payload16(), 32);
    }

    /**
     * Set the value of the field 'payload16'
     */
    public void set_payload16(long value) {
        setUIntBEElement(offsetBits_payload16(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload16'
     */
    public static int size_payload16() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload16'
     */
    public static int sizeBits_payload16() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload17
    //   Field type: long, unsigned
    //   Offset (bits): 528
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload17' is signed (false).
     */
    public static boolean isSigned_payload17() {
        return false;
    }

    /**
     * Return whether the field 'payload17' is an array (false).
     */
    public static boolean isArray_payload17() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload17'
     */
    public static int offset_payload17() {
        return (528 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload17'
     */
    public static int offsetBits_payload17() {
        return 528;
    }

    /**
     * Return the value (as a long) of the field 'payload17'
     */
    public long get_payload17() {
        return (long)getUIntBEElement(offsetBits_payload17(), 32);
    }

    /**
     * Set the value of the field 'payload17'
     */
    public void set_payload17(long value) {
        setUIntBEElement(offsetBits_payload17(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload17'
     */
    public static int size_payload17() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload17'
     */
    public static int sizeBits_payload17() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload18
    //   Field type: long, unsigned
    //   Offset (bits): 560
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload18' is signed (false).
     */
    public static boolean isSigned_payload18() {
        return false;
    }

    /**
     * Return whether the field 'payload18' is an array (false).
     */
    public static boolean isArray_payload18() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload18'
     */
    public static int offset_payload18() {
        return (560 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload18'
     */
    public static int offsetBits_payload18() {
        return 560;
    }

    /**
     * Return the value (as a long) of the field 'payload18'
     */
    public long get_payload18() {
        return (long)getUIntBEElement(offsetBits_payload18(), 32);
    }

    /**
     * Set the value of the field 'payload18'
     */
    public void set_payload18(long value) {
        setUIntBEElement(offsetBits_payload18(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload18'
     */
    public static int size_payload18() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload18'
     */
    public static int sizeBits_payload18() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload19
    //   Field type: long, unsigned
    //   Offset (bits): 592
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload19' is signed (false).
     */
    public static boolean isSigned_payload19() {
        return false;
    }

    /**
     * Return whether the field 'payload19' is an array (false).
     */
    public static boolean isArray_payload19() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload19'
     */
    public static int offset_payload19() {
        return (592 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload19'
     */
    public static int offsetBits_payload19() {
        return 592;
    }

    /**
     * Return the value (as a long) of the field 'payload19'
     */
    public long get_payload19() {
        return (long)getUIntBEElement(offsetBits_payload19(), 32);
    }

    /**
     * Set the value of the field 'payload19'
     */
    public void set_payload19(long value) {
        setUIntBEElement(offsetBits_payload19(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload19'
     */
    public static int size_payload19() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload19'
     */
    public static int sizeBits_payload19() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload20
    //   Field type: long, unsigned
    //   Offset (bits): 624
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload20' is signed (false).
     */
    public static boolean isSigned_payload20() {
        return false;
    }

    /**
     * Return whether the field 'payload20' is an array (false).
     */
    public static boolean isArray_payload20() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload20'
     */
    public static int offset_payload20() {
        return (624 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload20'
     */
    public static int offsetBits_payload20() {
        return 624;
    }

    /**
     * Return the value (as a long) of the field 'payload20'
     */
    public long get_payload20() {
        return (long)getUIntBEElement(offsetBits_payload20(), 32);
    }

    /**
     * Set the value of the field 'payload20'
     */
    public void set_payload20(long value) {
        setUIntBEElement(offsetBits_payload20(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload20'
     */
    public static int size_payload20() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload20'
     */
    public static int sizeBits_payload20() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload21
    //   Field type: long, unsigned
    //   Offset (bits): 656
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload21' is signed (false).
     */
    public static boolean isSigned_payload21() {
        return false;
    }

    /**
     * Return whether the field 'payload21' is an array (false).
     */
    public static boolean isArray_payload21() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload21'
     */
    public static int offset_payload21() {
        return (656 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload21'
     */
    public static int offsetBits_payload21() {
        return 656;
    }

    /**
     * Return the value (as a long) of the field 'payload21'
     */
    public long get_payload21() {
        return (long)getUIntBEElement(offsetBits_payload21(), 32);
    }

    /**
     * Set the value of the field 'payload21'
     */
    public void set_payload21(long value) {
        setUIntBEElement(offsetBits_payload21(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload21'
     */
    public static int size_payload21() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload21'
     */
    public static int sizeBits_payload21() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload22
    //   Field type: long, unsigned
    //   Offset (bits): 688
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload22' is signed (false).
     */
    public static boolean isSigned_payload22() {
        return false;
    }

    /**
     * Return whether the field 'payload22' is an array (false).
     */
    public static boolean isArray_payload22() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload22'
     */
    public static int offset_payload22() {
        return (688 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload22'
     */
    public static int offsetBits_payload22() {
        return 688;
    }

    /**
     * Return the value (as a long) of the field 'payload22'
     */
    public long get_payload22() {
        return (long)getUIntBEElement(offsetBits_payload22(), 32);
    }

    /**
     * Set the value of the field 'payload22'
     */
    public void set_payload22(long value) {
        setUIntBEElement(offsetBits_payload22(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload22'
     */
    public static int size_payload22() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload22'
     */
    public static int sizeBits_payload22() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload23
    //   Field type: long, unsigned
    //   Offset (bits): 720
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload23' is signed (false).
     */
    public static boolean isSigned_payload23() {
        return false;
    }

    /**
     * Return whether the field 'payload23' is an array (false).
     */
    public static boolean isArray_payload23() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload23'
     */
    public static int offset_payload23() {
        return (720 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload23'
     */
    public static int offsetBits_payload23() {
        return 720;
    }

    /**
     * Return the value (as a long) of the field 'payload23'
     */
    public long get_payload23() {
        return (long)getUIntBEElement(offsetBits_payload23(), 32);
    }

    /**
     * Set the value of the field 'payload23'
     */
    public void set_payload23(long value) {
        setUIntBEElement(offsetBits_payload23(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload23'
     */
    public static int size_payload23() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload23'
     */
    public static int sizeBits_payload23() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload24
    //   Field type: long, unsigned
    //   Offset (bits): 752
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload24' is signed (false).
     */
    public static boolean isSigned_payload24() {
        return false;
    }

    /**
     * Return whether the field 'payload24' is an array (false).
     */
    public static boolean isArray_payload24() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload24'
     */
    public static int offset_payload24() {
        return (752 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload24'
     */
    public static int offsetBits_payload24() {
        return 752;
    }

    /**
     * Return the value (as a long) of the field 'payload24'
     */
    public long get_payload24() {
        return (long)getUIntBEElement(offsetBits_payload24(), 32);
    }

    /**
     * Set the value of the field 'payload24'
     */
    public void set_payload24(long value) {
        setUIntBEElement(offsetBits_payload24(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload24'
     */
    public static int size_payload24() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload24'
     */
    public static int sizeBits_payload24() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload25
    //   Field type: long, unsigned
    //   Offset (bits): 784
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload25' is signed (false).
     */
    public static boolean isSigned_payload25() {
        return false;
    }

    /**
     * Return whether the field 'payload25' is an array (false).
     */
    public static boolean isArray_payload25() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload25'
     */
    public static int offset_payload25() {
        return (784 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload25'
     */
    public static int offsetBits_payload25() {
        return 784;
    }

    /**
     * Return the value (as a long) of the field 'payload25'
     */
    public long get_payload25() {
        return (long)getUIntBEElement(offsetBits_payload25(), 32);
    }

    /**
     * Set the value of the field 'payload25'
     */
    public void set_payload25(long value) {
        setUIntBEElement(offsetBits_payload25(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload25'
     */
    public static int size_payload25() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload25'
     */
    public static int sizeBits_payload25() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload26
    //   Field type: long, unsigned
    //   Offset (bits): 816
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload26' is signed (false).
     */
    public static boolean isSigned_payload26() {
        return false;
    }

    /**
     * Return whether the field 'payload26' is an array (false).
     */
    public static boolean isArray_payload26() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload26'
     */
    public static int offset_payload26() {
        return (816 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload26'
     */
    public static int offsetBits_payload26() {
        return 816;
    }

    /**
     * Return the value (as a long) of the field 'payload26'
     */
    public long get_payload26() {
        return (long)getUIntBEElement(offsetBits_payload26(), 32);
    }

    /**
     * Set the value of the field 'payload26'
     */
    public void set_payload26(long value) {
        setUIntBEElement(offsetBits_payload26(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload26'
     */
    public static int size_payload26() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload26'
     */
    public static int sizeBits_payload26() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload27
    //   Field type: long, unsigned
    //   Offset (bits): 848
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload27' is signed (false).
     */
    public static boolean isSigned_payload27() {
        return false;
    }

    /**
     * Return whether the field 'payload27' is an array (false).
     */
    public static boolean isArray_payload27() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload27'
     */
    public static int offset_payload27() {
        return (848 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload27'
     */
    public static int offsetBits_payload27() {
        return 848;
    }

    /**
     * Return the value (as a long) of the field 'payload27'
     */
    public long get_payload27() {
        return (long)getUIntBEElement(offsetBits_payload27(), 32);
    }

    /**
     * Set the value of the field 'payload27'
     */
    public void set_payload27(long value) {
        setUIntBEElement(offsetBits_payload27(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload27'
     */
    public static int size_payload27() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload27'
     */
    public static int sizeBits_payload27() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload28
    //   Field type: long, unsigned
    //   Offset (bits): 880
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload28' is signed (false).
     */
    public static boolean isSigned_payload28() {
        return false;
    }

    /**
     * Return whether the field 'payload28' is an array (false).
     */
    public static boolean isArray_payload28() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload28'
     */
    public static int offset_payload28() {
        return (880 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload28'
     */
    public static int offsetBits_payload28() {
        return 880;
    }

    /**
     * Return the value (as a long) of the field 'payload28'
     */
    public long get_payload28() {
        return (long)getUIntBEElement(offsetBits_payload28(), 32);
    }

    /**
     * Set the value of the field 'payload28'
     */
    public void set_payload28(long value) {
        setUIntBEElement(offsetBits_payload28(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload28'
     */
    public static int size_payload28() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload28'
     */
    public static int sizeBits_payload28() {
        return 32;
    }

}
