#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'RadioCountMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 114

# The Active Message type associated with this message.
AM_TYPE = 6

class RadioCountMsg(tinyos.message.Message.Message):
    # Create a new RadioCountMsg of size 114.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=114):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <RadioCountMsg> \n"
        try:
            s += "  [counter=0x%x]\n" % (self.get_counter())
        except:
            pass
        try:
            s += "  [payload1=0x%x]\n" % (self.get_payload1())
        except:
            pass
        try:
            s += "  [payload2=0x%x]\n" % (self.get_payload2())
        except:
            pass
        try:
            s += "  [payload3=0x%x]\n" % (self.get_payload3())
        except:
            pass
        try:
            s += "  [payload4=0x%x]\n" % (self.get_payload4())
        except:
            pass
        try:
            s += "  [payload5=0x%x]\n" % (self.get_payload5())
        except:
            pass
        try:
            s += "  [payload6=0x%x]\n" % (self.get_payload6())
        except:
            pass
        try:
            s += "  [payload7=0x%x]\n" % (self.get_payload7())
        except:
            pass
        try:
            s += "  [payload8=0x%x]\n" % (self.get_payload8())
        except:
            pass
        try:
            s += "  [payload9=0x%x]\n" % (self.get_payload9())
        except:
            pass
        try:
            s += "  [payload10=0x%x]\n" % (self.get_payload10())
        except:
            pass
        try:
            s += "  [payload11=0x%x]\n" % (self.get_payload11())
        except:
            pass
        try:
            s += "  [payload12=0x%x]\n" % (self.get_payload12())
        except:
            pass
        try:
            s += "  [payload13=0x%x]\n" % (self.get_payload13())
        except:
            pass
        try:
            s += "  [payload14=0x%x]\n" % (self.get_payload14())
        except:
            pass
        try:
            s += "  [payload15=0x%x]\n" % (self.get_payload15())
        except:
            pass
        try:
            s += "  [payload16=0x%x]\n" % (self.get_payload16())
        except:
            pass
        try:
            s += "  [payload17=0x%x]\n" % (self.get_payload17())
        except:
            pass
        try:
            s += "  [payload18=0x%x]\n" % (self.get_payload18())
        except:
            pass
        try:
            s += "  [payload19=0x%x]\n" % (self.get_payload19())
        except:
            pass
        try:
            s += "  [payload20=0x%x]\n" % (self.get_payload20())
        except:
            pass
        try:
            s += "  [payload21=0x%x]\n" % (self.get_payload21())
        except:
            pass
        try:
            s += "  [payload22=0x%x]\n" % (self.get_payload22())
        except:
            pass
        try:
            s += "  [payload23=0x%x]\n" % (self.get_payload23())
        except:
            pass
        try:
            s += "  [payload24=0x%x]\n" % (self.get_payload24())
        except:
            pass
        try:
            s += "  [payload25=0x%x]\n" % (self.get_payload25())
        except:
            pass
        try:
            s += "  [payload26=0x%x]\n" % (self.get_payload26())
        except:
            pass
        try:
            s += "  [payload27=0x%x]\n" % (self.get_payload27())
        except:
            pass
        try:
            s += "  [payload28=0x%x]\n" % (self.get_payload28())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: counter
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'counter' is signed (False).
    #
    def isSigned_counter(self):
        return False
    
    #
    # Return whether the field 'counter' is an array (False).
    #
    def isArray_counter(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'counter'
    #
    def offset_counter(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'counter'
    #
    def offsetBits_counter(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'counter'
    #
    def get_counter(self):
        return self.getUIntElement(self.offsetBits_counter(), 16, 1)
    
    #
    # Set the value of the field 'counter'
    #
    def set_counter(self, value):
        self.setUIntElement(self.offsetBits_counter(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'counter'
    #
    def size_counter(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'counter'
    #
    def sizeBits_counter(self):
        return 16
    
    #
    # Accessor methods for field: payload1
    #   Field type: long
    #   Offset (bits): 16
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload1' is signed (False).
    #
    def isSigned_payload1(self):
        return False
    
    #
    # Return whether the field 'payload1' is an array (False).
    #
    def isArray_payload1(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload1'
    #
    def offset_payload1(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload1'
    #
    def offsetBits_payload1(self):
        return 16
    
    #
    # Return the value (as a long) of the field 'payload1'
    #
    def get_payload1(self):
        return self.getUIntElement(self.offsetBits_payload1(), 32, 1)
    
    #
    # Set the value of the field 'payload1'
    #
    def set_payload1(self, value):
        self.setUIntElement(self.offsetBits_payload1(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload1'
    #
    def size_payload1(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload1'
    #
    def sizeBits_payload1(self):
        return 32
    
    #
    # Accessor methods for field: payload2
    #   Field type: long
    #   Offset (bits): 48
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload2' is signed (False).
    #
    def isSigned_payload2(self):
        return False
    
    #
    # Return whether the field 'payload2' is an array (False).
    #
    def isArray_payload2(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload2'
    #
    def offset_payload2(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload2'
    #
    def offsetBits_payload2(self):
        return 48
    
    #
    # Return the value (as a long) of the field 'payload2'
    #
    def get_payload2(self):
        return self.getUIntElement(self.offsetBits_payload2(), 32, 1)
    
    #
    # Set the value of the field 'payload2'
    #
    def set_payload2(self, value):
        self.setUIntElement(self.offsetBits_payload2(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload2'
    #
    def size_payload2(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload2'
    #
    def sizeBits_payload2(self):
        return 32
    
    #
    # Accessor methods for field: payload3
    #   Field type: long
    #   Offset (bits): 80
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload3' is signed (False).
    #
    def isSigned_payload3(self):
        return False
    
    #
    # Return whether the field 'payload3' is an array (False).
    #
    def isArray_payload3(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload3'
    #
    def offset_payload3(self):
        return (80 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload3'
    #
    def offsetBits_payload3(self):
        return 80
    
    #
    # Return the value (as a long) of the field 'payload3'
    #
    def get_payload3(self):
        return self.getUIntElement(self.offsetBits_payload3(), 32, 1)
    
    #
    # Set the value of the field 'payload3'
    #
    def set_payload3(self, value):
        self.setUIntElement(self.offsetBits_payload3(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload3'
    #
    def size_payload3(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload3'
    #
    def sizeBits_payload3(self):
        return 32
    
    #
    # Accessor methods for field: payload4
    #   Field type: long
    #   Offset (bits): 112
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload4' is signed (False).
    #
    def isSigned_payload4(self):
        return False
    
    #
    # Return whether the field 'payload4' is an array (False).
    #
    def isArray_payload4(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload4'
    #
    def offset_payload4(self):
        return (112 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload4'
    #
    def offsetBits_payload4(self):
        return 112
    
    #
    # Return the value (as a long) of the field 'payload4'
    #
    def get_payload4(self):
        return self.getUIntElement(self.offsetBits_payload4(), 32, 1)
    
    #
    # Set the value of the field 'payload4'
    #
    def set_payload4(self, value):
        self.setUIntElement(self.offsetBits_payload4(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload4'
    #
    def size_payload4(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload4'
    #
    def sizeBits_payload4(self):
        return 32
    
    #
    # Accessor methods for field: payload5
    #   Field type: long
    #   Offset (bits): 144
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload5' is signed (False).
    #
    def isSigned_payload5(self):
        return False
    
    #
    # Return whether the field 'payload5' is an array (False).
    #
    def isArray_payload5(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload5'
    #
    def offset_payload5(self):
        return (144 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload5'
    #
    def offsetBits_payload5(self):
        return 144
    
    #
    # Return the value (as a long) of the field 'payload5'
    #
    def get_payload5(self):
        return self.getUIntElement(self.offsetBits_payload5(), 32, 1)
    
    #
    # Set the value of the field 'payload5'
    #
    def set_payload5(self, value):
        self.setUIntElement(self.offsetBits_payload5(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload5'
    #
    def size_payload5(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload5'
    #
    def sizeBits_payload5(self):
        return 32
    
    #
    # Accessor methods for field: payload6
    #   Field type: long
    #   Offset (bits): 176
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload6' is signed (False).
    #
    def isSigned_payload6(self):
        return False
    
    #
    # Return whether the field 'payload6' is an array (False).
    #
    def isArray_payload6(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload6'
    #
    def offset_payload6(self):
        return (176 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload6'
    #
    def offsetBits_payload6(self):
        return 176
    
    #
    # Return the value (as a long) of the field 'payload6'
    #
    def get_payload6(self):
        return self.getUIntElement(self.offsetBits_payload6(), 32, 1)
    
    #
    # Set the value of the field 'payload6'
    #
    def set_payload6(self, value):
        self.setUIntElement(self.offsetBits_payload6(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload6'
    #
    def size_payload6(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload6'
    #
    def sizeBits_payload6(self):
        return 32
    
    #
    # Accessor methods for field: payload7
    #   Field type: long
    #   Offset (bits): 208
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload7' is signed (False).
    #
    def isSigned_payload7(self):
        return False
    
    #
    # Return whether the field 'payload7' is an array (False).
    #
    def isArray_payload7(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload7'
    #
    def offset_payload7(self):
        return (208 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload7'
    #
    def offsetBits_payload7(self):
        return 208
    
    #
    # Return the value (as a long) of the field 'payload7'
    #
    def get_payload7(self):
        return self.getUIntElement(self.offsetBits_payload7(), 32, 1)
    
    #
    # Set the value of the field 'payload7'
    #
    def set_payload7(self, value):
        self.setUIntElement(self.offsetBits_payload7(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload7'
    #
    def size_payload7(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload7'
    #
    def sizeBits_payload7(self):
        return 32
    
    #
    # Accessor methods for field: payload8
    #   Field type: long
    #   Offset (bits): 240
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload8' is signed (False).
    #
    def isSigned_payload8(self):
        return False
    
    #
    # Return whether the field 'payload8' is an array (False).
    #
    def isArray_payload8(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload8'
    #
    def offset_payload8(self):
        return (240 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload8'
    #
    def offsetBits_payload8(self):
        return 240
    
    #
    # Return the value (as a long) of the field 'payload8'
    #
    def get_payload8(self):
        return self.getUIntElement(self.offsetBits_payload8(), 32, 1)
    
    #
    # Set the value of the field 'payload8'
    #
    def set_payload8(self, value):
        self.setUIntElement(self.offsetBits_payload8(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload8'
    #
    def size_payload8(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload8'
    #
    def sizeBits_payload8(self):
        return 32
    
    #
    # Accessor methods for field: payload9
    #   Field type: long
    #   Offset (bits): 272
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload9' is signed (False).
    #
    def isSigned_payload9(self):
        return False
    
    #
    # Return whether the field 'payload9' is an array (False).
    #
    def isArray_payload9(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload9'
    #
    def offset_payload9(self):
        return (272 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload9'
    #
    def offsetBits_payload9(self):
        return 272
    
    #
    # Return the value (as a long) of the field 'payload9'
    #
    def get_payload9(self):
        return self.getUIntElement(self.offsetBits_payload9(), 32, 1)
    
    #
    # Set the value of the field 'payload9'
    #
    def set_payload9(self, value):
        self.setUIntElement(self.offsetBits_payload9(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload9'
    #
    def size_payload9(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload9'
    #
    def sizeBits_payload9(self):
        return 32
    
    #
    # Accessor methods for field: payload10
    #   Field type: long
    #   Offset (bits): 304
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload10' is signed (False).
    #
    def isSigned_payload10(self):
        return False
    
    #
    # Return whether the field 'payload10' is an array (False).
    #
    def isArray_payload10(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload10'
    #
    def offset_payload10(self):
        return (304 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload10'
    #
    def offsetBits_payload10(self):
        return 304
    
    #
    # Return the value (as a long) of the field 'payload10'
    #
    def get_payload10(self):
        return self.getUIntElement(self.offsetBits_payload10(), 32, 1)
    
    #
    # Set the value of the field 'payload10'
    #
    def set_payload10(self, value):
        self.setUIntElement(self.offsetBits_payload10(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload10'
    #
    def size_payload10(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload10'
    #
    def sizeBits_payload10(self):
        return 32
    
    #
    # Accessor methods for field: payload11
    #   Field type: long
    #   Offset (bits): 336
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload11' is signed (False).
    #
    def isSigned_payload11(self):
        return False
    
    #
    # Return whether the field 'payload11' is an array (False).
    #
    def isArray_payload11(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload11'
    #
    def offset_payload11(self):
        return (336 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload11'
    #
    def offsetBits_payload11(self):
        return 336
    
    #
    # Return the value (as a long) of the field 'payload11'
    #
    def get_payload11(self):
        return self.getUIntElement(self.offsetBits_payload11(), 32, 1)
    
    #
    # Set the value of the field 'payload11'
    #
    def set_payload11(self, value):
        self.setUIntElement(self.offsetBits_payload11(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload11'
    #
    def size_payload11(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload11'
    #
    def sizeBits_payload11(self):
        return 32
    
    #
    # Accessor methods for field: payload12
    #   Field type: long
    #   Offset (bits): 368
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload12' is signed (False).
    #
    def isSigned_payload12(self):
        return False
    
    #
    # Return whether the field 'payload12' is an array (False).
    #
    def isArray_payload12(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload12'
    #
    def offset_payload12(self):
        return (368 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload12'
    #
    def offsetBits_payload12(self):
        return 368
    
    #
    # Return the value (as a long) of the field 'payload12'
    #
    def get_payload12(self):
        return self.getUIntElement(self.offsetBits_payload12(), 32, 1)
    
    #
    # Set the value of the field 'payload12'
    #
    def set_payload12(self, value):
        self.setUIntElement(self.offsetBits_payload12(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload12'
    #
    def size_payload12(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload12'
    #
    def sizeBits_payload12(self):
        return 32
    
    #
    # Accessor methods for field: payload13
    #   Field type: long
    #   Offset (bits): 400
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload13' is signed (False).
    #
    def isSigned_payload13(self):
        return False
    
    #
    # Return whether the field 'payload13' is an array (False).
    #
    def isArray_payload13(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload13'
    #
    def offset_payload13(self):
        return (400 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload13'
    #
    def offsetBits_payload13(self):
        return 400
    
    #
    # Return the value (as a long) of the field 'payload13'
    #
    def get_payload13(self):
        return self.getUIntElement(self.offsetBits_payload13(), 32, 1)
    
    #
    # Set the value of the field 'payload13'
    #
    def set_payload13(self, value):
        self.setUIntElement(self.offsetBits_payload13(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload13'
    #
    def size_payload13(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload13'
    #
    def sizeBits_payload13(self):
        return 32
    
    #
    # Accessor methods for field: payload14
    #   Field type: long
    #   Offset (bits): 432
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload14' is signed (False).
    #
    def isSigned_payload14(self):
        return False
    
    #
    # Return whether the field 'payload14' is an array (False).
    #
    def isArray_payload14(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload14'
    #
    def offset_payload14(self):
        return (432 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload14'
    #
    def offsetBits_payload14(self):
        return 432
    
    #
    # Return the value (as a long) of the field 'payload14'
    #
    def get_payload14(self):
        return self.getUIntElement(self.offsetBits_payload14(), 32, 1)
    
    #
    # Set the value of the field 'payload14'
    #
    def set_payload14(self, value):
        self.setUIntElement(self.offsetBits_payload14(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload14'
    #
    def size_payload14(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload14'
    #
    def sizeBits_payload14(self):
        return 32
    
    #
    # Accessor methods for field: payload15
    #   Field type: long
    #   Offset (bits): 464
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload15' is signed (False).
    #
    def isSigned_payload15(self):
        return False
    
    #
    # Return whether the field 'payload15' is an array (False).
    #
    def isArray_payload15(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload15'
    #
    def offset_payload15(self):
        return (464 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload15'
    #
    def offsetBits_payload15(self):
        return 464
    
    #
    # Return the value (as a long) of the field 'payload15'
    #
    def get_payload15(self):
        return self.getUIntElement(self.offsetBits_payload15(), 32, 1)
    
    #
    # Set the value of the field 'payload15'
    #
    def set_payload15(self, value):
        self.setUIntElement(self.offsetBits_payload15(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload15'
    #
    def size_payload15(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload15'
    #
    def sizeBits_payload15(self):
        return 32
    
    #
    # Accessor methods for field: payload16
    #   Field type: long
    #   Offset (bits): 496
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload16' is signed (False).
    #
    def isSigned_payload16(self):
        return False
    
    #
    # Return whether the field 'payload16' is an array (False).
    #
    def isArray_payload16(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload16'
    #
    def offset_payload16(self):
        return (496 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload16'
    #
    def offsetBits_payload16(self):
        return 496
    
    #
    # Return the value (as a long) of the field 'payload16'
    #
    def get_payload16(self):
        return self.getUIntElement(self.offsetBits_payload16(), 32, 1)
    
    #
    # Set the value of the field 'payload16'
    #
    def set_payload16(self, value):
        self.setUIntElement(self.offsetBits_payload16(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload16'
    #
    def size_payload16(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload16'
    #
    def sizeBits_payload16(self):
        return 32
    
    #
    # Accessor methods for field: payload17
    #   Field type: long
    #   Offset (bits): 528
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload17' is signed (False).
    #
    def isSigned_payload17(self):
        return False
    
    #
    # Return whether the field 'payload17' is an array (False).
    #
    def isArray_payload17(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload17'
    #
    def offset_payload17(self):
        return (528 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload17'
    #
    def offsetBits_payload17(self):
        return 528
    
    #
    # Return the value (as a long) of the field 'payload17'
    #
    def get_payload17(self):
        return self.getUIntElement(self.offsetBits_payload17(), 32, 1)
    
    #
    # Set the value of the field 'payload17'
    #
    def set_payload17(self, value):
        self.setUIntElement(self.offsetBits_payload17(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload17'
    #
    def size_payload17(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload17'
    #
    def sizeBits_payload17(self):
        return 32
    
    #
    # Accessor methods for field: payload18
    #   Field type: long
    #   Offset (bits): 560
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload18' is signed (False).
    #
    def isSigned_payload18(self):
        return False
    
    #
    # Return whether the field 'payload18' is an array (False).
    #
    def isArray_payload18(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload18'
    #
    def offset_payload18(self):
        return (560 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload18'
    #
    def offsetBits_payload18(self):
        return 560
    
    #
    # Return the value (as a long) of the field 'payload18'
    #
    def get_payload18(self):
        return self.getUIntElement(self.offsetBits_payload18(), 32, 1)
    
    #
    # Set the value of the field 'payload18'
    #
    def set_payload18(self, value):
        self.setUIntElement(self.offsetBits_payload18(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload18'
    #
    def size_payload18(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload18'
    #
    def sizeBits_payload18(self):
        return 32
    
    #
    # Accessor methods for field: payload19
    #   Field type: long
    #   Offset (bits): 592
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload19' is signed (False).
    #
    def isSigned_payload19(self):
        return False
    
    #
    # Return whether the field 'payload19' is an array (False).
    #
    def isArray_payload19(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload19'
    #
    def offset_payload19(self):
        return (592 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload19'
    #
    def offsetBits_payload19(self):
        return 592
    
    #
    # Return the value (as a long) of the field 'payload19'
    #
    def get_payload19(self):
        return self.getUIntElement(self.offsetBits_payload19(), 32, 1)
    
    #
    # Set the value of the field 'payload19'
    #
    def set_payload19(self, value):
        self.setUIntElement(self.offsetBits_payload19(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload19'
    #
    def size_payload19(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload19'
    #
    def sizeBits_payload19(self):
        return 32
    
    #
    # Accessor methods for field: payload20
    #   Field type: long
    #   Offset (bits): 624
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload20' is signed (False).
    #
    def isSigned_payload20(self):
        return False
    
    #
    # Return whether the field 'payload20' is an array (False).
    #
    def isArray_payload20(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload20'
    #
    def offset_payload20(self):
        return (624 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload20'
    #
    def offsetBits_payload20(self):
        return 624
    
    #
    # Return the value (as a long) of the field 'payload20'
    #
    def get_payload20(self):
        return self.getUIntElement(self.offsetBits_payload20(), 32, 1)
    
    #
    # Set the value of the field 'payload20'
    #
    def set_payload20(self, value):
        self.setUIntElement(self.offsetBits_payload20(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload20'
    #
    def size_payload20(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload20'
    #
    def sizeBits_payload20(self):
        return 32
    
    #
    # Accessor methods for field: payload21
    #   Field type: long
    #   Offset (bits): 656
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload21' is signed (False).
    #
    def isSigned_payload21(self):
        return False
    
    #
    # Return whether the field 'payload21' is an array (False).
    #
    def isArray_payload21(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload21'
    #
    def offset_payload21(self):
        return (656 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload21'
    #
    def offsetBits_payload21(self):
        return 656
    
    #
    # Return the value (as a long) of the field 'payload21'
    #
    def get_payload21(self):
        return self.getUIntElement(self.offsetBits_payload21(), 32, 1)
    
    #
    # Set the value of the field 'payload21'
    #
    def set_payload21(self, value):
        self.setUIntElement(self.offsetBits_payload21(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload21'
    #
    def size_payload21(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload21'
    #
    def sizeBits_payload21(self):
        return 32
    
    #
    # Accessor methods for field: payload22
    #   Field type: long
    #   Offset (bits): 688
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload22' is signed (False).
    #
    def isSigned_payload22(self):
        return False
    
    #
    # Return whether the field 'payload22' is an array (False).
    #
    def isArray_payload22(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload22'
    #
    def offset_payload22(self):
        return (688 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload22'
    #
    def offsetBits_payload22(self):
        return 688
    
    #
    # Return the value (as a long) of the field 'payload22'
    #
    def get_payload22(self):
        return self.getUIntElement(self.offsetBits_payload22(), 32, 1)
    
    #
    # Set the value of the field 'payload22'
    #
    def set_payload22(self, value):
        self.setUIntElement(self.offsetBits_payload22(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload22'
    #
    def size_payload22(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload22'
    #
    def sizeBits_payload22(self):
        return 32
    
    #
    # Accessor methods for field: payload23
    #   Field type: long
    #   Offset (bits): 720
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload23' is signed (False).
    #
    def isSigned_payload23(self):
        return False
    
    #
    # Return whether the field 'payload23' is an array (False).
    #
    def isArray_payload23(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload23'
    #
    def offset_payload23(self):
        return (720 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload23'
    #
    def offsetBits_payload23(self):
        return 720
    
    #
    # Return the value (as a long) of the field 'payload23'
    #
    def get_payload23(self):
        return self.getUIntElement(self.offsetBits_payload23(), 32, 1)
    
    #
    # Set the value of the field 'payload23'
    #
    def set_payload23(self, value):
        self.setUIntElement(self.offsetBits_payload23(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload23'
    #
    def size_payload23(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload23'
    #
    def sizeBits_payload23(self):
        return 32
    
    #
    # Accessor methods for field: payload24
    #   Field type: long
    #   Offset (bits): 752
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload24' is signed (False).
    #
    def isSigned_payload24(self):
        return False
    
    #
    # Return whether the field 'payload24' is an array (False).
    #
    def isArray_payload24(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload24'
    #
    def offset_payload24(self):
        return (752 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload24'
    #
    def offsetBits_payload24(self):
        return 752
    
    #
    # Return the value (as a long) of the field 'payload24'
    #
    def get_payload24(self):
        return self.getUIntElement(self.offsetBits_payload24(), 32, 1)
    
    #
    # Set the value of the field 'payload24'
    #
    def set_payload24(self, value):
        self.setUIntElement(self.offsetBits_payload24(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload24'
    #
    def size_payload24(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload24'
    #
    def sizeBits_payload24(self):
        return 32
    
    #
    # Accessor methods for field: payload25
    #   Field type: long
    #   Offset (bits): 784
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload25' is signed (False).
    #
    def isSigned_payload25(self):
        return False
    
    #
    # Return whether the field 'payload25' is an array (False).
    #
    def isArray_payload25(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload25'
    #
    def offset_payload25(self):
        return (784 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload25'
    #
    def offsetBits_payload25(self):
        return 784
    
    #
    # Return the value (as a long) of the field 'payload25'
    #
    def get_payload25(self):
        return self.getUIntElement(self.offsetBits_payload25(), 32, 1)
    
    #
    # Set the value of the field 'payload25'
    #
    def set_payload25(self, value):
        self.setUIntElement(self.offsetBits_payload25(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload25'
    #
    def size_payload25(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload25'
    #
    def sizeBits_payload25(self):
        return 32
    
    #
    # Accessor methods for field: payload26
    #   Field type: long
    #   Offset (bits): 816
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload26' is signed (False).
    #
    def isSigned_payload26(self):
        return False
    
    #
    # Return whether the field 'payload26' is an array (False).
    #
    def isArray_payload26(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload26'
    #
    def offset_payload26(self):
        return (816 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload26'
    #
    def offsetBits_payload26(self):
        return 816
    
    #
    # Return the value (as a long) of the field 'payload26'
    #
    def get_payload26(self):
        return self.getUIntElement(self.offsetBits_payload26(), 32, 1)
    
    #
    # Set the value of the field 'payload26'
    #
    def set_payload26(self, value):
        self.setUIntElement(self.offsetBits_payload26(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload26'
    #
    def size_payload26(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload26'
    #
    def sizeBits_payload26(self):
        return 32
    
    #
    # Accessor methods for field: payload27
    #   Field type: long
    #   Offset (bits): 848
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload27' is signed (False).
    #
    def isSigned_payload27(self):
        return False
    
    #
    # Return whether the field 'payload27' is an array (False).
    #
    def isArray_payload27(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload27'
    #
    def offset_payload27(self):
        return (848 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload27'
    #
    def offsetBits_payload27(self):
        return 848
    
    #
    # Return the value (as a long) of the field 'payload27'
    #
    def get_payload27(self):
        return self.getUIntElement(self.offsetBits_payload27(), 32, 1)
    
    #
    # Set the value of the field 'payload27'
    #
    def set_payload27(self, value):
        self.setUIntElement(self.offsetBits_payload27(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload27'
    #
    def size_payload27(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload27'
    #
    def sizeBits_payload27(self):
        return 32
    
    #
    # Accessor methods for field: payload28
    #   Field type: long
    #   Offset (bits): 880
    #   Size (bits): 32
    #

    #
    # Return whether the field 'payload28' is signed (False).
    #
    def isSigned_payload28(self):
        return False
    
    #
    # Return whether the field 'payload28' is an array (False).
    #
    def isArray_payload28(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'payload28'
    #
    def offset_payload28(self):
        return (880 / 8)
    
    #
    # Return the offset (in bits) of the field 'payload28'
    #
    def offsetBits_payload28(self):
        return 880
    
    #
    # Return the value (as a long) of the field 'payload28'
    #
    def get_payload28(self):
        return self.getUIntElement(self.offsetBits_payload28(), 32, 1)
    
    #
    # Set the value of the field 'payload28'
    #
    def set_payload28(self, value):
        self.setUIntElement(self.offsetBits_payload28(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'payload28'
    #
    def size_payload28(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'payload28'
    #
    def sizeBits_payload28(self):
        return 32
    
